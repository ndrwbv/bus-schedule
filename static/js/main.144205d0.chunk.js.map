{"version":3,"sources":["Schedule/consts.ts","Schedule/helpers.ts","Schedule/index.tsx","App.tsx","index.tsx"],"names":["SCHEDULE","monday","маяковского","tuesday","wednesday","thursday","friday","saturday","sunday","calculateHowMuchIsLeft","closestTime","hours","minutes","mins","left","Math","abs","getTime","Date","trunc","round","HowMuchLeftBlock","styled","div","LinksBlock","BusEstimation","TextWrapper","p","HighLighted","span","OtherTime","TimeStamp","Schedule","React","useState","busStop","setLeft","closestTimeArray","setClossestTimeArray","setClossestTime","_everyMinuteUpdate","_setUpdate","useEffect","console","log","int","setInterval","now","clearInterval","_closestTime","i","length","splitted","split","map","item","parseInt","possibleDate","setHours","findClosesTime","getMinutes","getHours","push","findClosesTimeArray","d","href","target","rel","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAsBaA,EAAwD,CACnEC,OAAQ,CACNC,qEAAa,CACX,OACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,SAEF,sEAAgB,IAElBC,QAAS,CACPD,qEAAa,CACX,OACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,SAEF,sEAAgB,IAElBE,UAAW,CACTF,qEAAa,CACX,OACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,SAEF,sEAAgB,IAElBG,SAAU,CACRH,qEAAa,CACX,OACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,SAEF,sEAAgB,IAElBI,OAAQ,CACNJ,qEAAa,CACX,OACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,SAEF,sEAAgB,IAElBK,SAAU,CACRL,qEAAa,CACX,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,SAEF,sEAAgB,IAElBM,OAAQ,CACNN,qEAAa,CACX,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,SAEF,sEAAgB,KCxIPO,EAAyB,SACpCC,GAEA,IAAKA,EACH,MAAO,CACLC,MAAO,KACPC,QAAS,MAGb,IAxBuBC,EAwBjBC,EACJC,KAAKC,IAAIN,EAAYO,WAAY,IAAIC,MAAOD,WAAa,IAAO,GAElE,OA3BuBJ,EA2BAC,EAvBhB,CACLH,MAJUI,KAAKI,MAAMN,EAAO,IAK5BD,QAJYG,KAAKK,MAAMP,EAAO,M,OCpC5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","file":"static/js/main.144205d0.chunk.js","sourcesContent":["export type DayKeys =\n  | \"monday\"\n  | \"tuesday\"\n  | \"wednesday\"\n  | \"thursday\"\n  | \"friday\"\n  | \"saturday\"\n  | \"sunday\";\n\nexport const Stops = [\n  {\n    label: \"маяковского\",\n    value: \"мояковского\",\n  },\n  {\n    label: \"сосновый бор\",\n    value: \"сосновый бор\",\n  },\n];\n\nexport type StopKeys = \"маяковского\" | \"сосновый бор\";\n\nexport const SCHEDULE: Record<DayKeys, Record<StopKeys, string[]>> = {\n  monday: {\n    маяковского: [\n      \"6:37\",\n      \"07:07\",\n      \"07:22\",\n      \"07:42\",\n      \"08:17\",\n      \"09:12\",\n      \"09:42\",\n      \"10:12\",\n      \"10:42\",\n      \"11:22\",\n      \"12:07\",\n      \"12:57\",\n      \"13:32\",\n      \"14:42\",\n      \"15:52\",\n      \"16:52\",\n      \"17:22\",\n      \"17:52\",\n      \"18:22\",\n      \"18:52\",\n      \"19:42\",\n      \"20:22\",\n      \"21:01\",\n    ],\n    \"сосновый бор\": [],\n  },\n  tuesday: {\n    маяковского: [\n      \"6:37\",\n      \"07:07\",\n      \"07:22\",\n      \"07:42\",\n      \"08:17\",\n      \"09:12\",\n      \"09:42\",\n      \"10:12\",\n      \"10:42\",\n      \"11:22\",\n      \"12:07\",\n      \"12:57\",\n      \"13:32\",\n      \"14:42\",\n      \"15:52\",\n      \"16:52\",\n      \"17:22\",\n      \"17:52\",\n      \"18:22\",\n      \"18:52\",\n      \"19:42\",\n      \"20:22\",\n      \"21:01\",\n    ],\n    \"сосновый бор\": [],\n  },\n  wednesday: {\n    маяковского: [\n      \"6:37\",\n      \"07:07\",\n      \"07:22\",\n      \"07:42\",\n      \"08:17\",\n      \"09:12\",\n      \"09:42\",\n      \"10:12\",\n      \"10:42\",\n      \"11:22\",\n      \"12:07\",\n      \"12:57\",\n      \"13:32\",\n      \"14:42\",\n      \"15:52\",\n      \"16:52\",\n      \"17:22\",\n      \"17:52\",\n      \"18:22\",\n      \"18:52\",\n      \"19:42\",\n      \"20:22\",\n      \"21:01\",\n    ],\n    \"сосновый бор\": [],\n  },\n  thursday: {\n    маяковского: [\n      \"6:37\",\n      \"07:07\",\n      \"07:22\",\n      \"07:42\",\n      \"08:17\",\n      \"09:12\",\n      \"09:42\",\n      \"10:12\",\n      \"10:42\",\n      \"11:22\",\n      \"12:07\",\n      \"12:57\",\n      \"13:32\",\n      \"14:42\",\n      \"15:52\",\n      \"16:52\",\n      \"17:22\",\n      \"17:52\",\n      \"18:22\",\n      \"18:52\",\n      \"19:42\",\n      \"20:22\",\n      \"21:01\",\n    ],\n    \"сосновый бор\": [],\n  },\n  friday: {\n    маяковского: [\n      \"6:37\",\n      \"07:07\",\n      \"07:22\",\n      \"07:42\",\n      \"08:17\",\n      \"09:12\",\n      \"09:42\",\n      \"10:12\",\n      \"10:42\",\n      \"11:22\",\n      \"12:07\",\n      \"12:57\",\n      \"13:32\",\n      \"14:42\",\n      \"15:52\",\n      \"16:52\",\n      \"17:22\",\n      \"17:52\",\n      \"18:22\",\n      \"18:52\",\n      \"19:42\",\n      \"20:22\",\n      \"21:01\",\n    ],\n    \"сосновый бор\": [],\n  },\n  saturday: {\n    маяковского: [\n      \"07:07\",\n      \"08:17\",\n      \"09:12\",\n      \"10:12\",\n      \"11:22\",\n      \"12:07\",\n      \"12:57\",\n      \"13:32\",\n      \"14:42\",\n      \"15:52\",\n      \"16:52\",\n      \"17:52\",\n      \"18:52\",\n      \"19:42\",\n    ],\n    \"сосновый бор\": [],\n  },\n  sunday: {\n    маяковского: [\n      \"08:17\",\n      \"09:12\",\n      \"10:12\",\n      \"11:22\",\n      \"12:07\",\n      \"12:57\",\n      \"14:42\",\n      \"15:52\",\n      \"16:52\",\n      \"17:52\",\n      \"18:52\",\n      \"19:42\",\n    ],\n    \"сосновый бор\": [],\n  },\n};\n","/**\n * находит ближайшее время в расписании\n * @param hours\n */\nexport const findClosesTime = (hours: string[]): Date | null => {\n  let closestTime: Date | null = null;\n\n  for (let i = 0; i < hours.length; i++) {\n    const splitted = hours[i].split(\":\").map((item) => parseInt(item, 10));\n\n    const possibleDate = new Date().setHours(splitted[0], splitted[1]);\n\n    if (possibleDate - new Date().getTime() > 0) {\n      if (!closestTime) closestTime = new Date(possibleDate);\n      else if (closestTime.getTime() - possibleDate > 0)\n        closestTime = new Date(possibleDate);\n    }\n  }\n\n  return closestTime;\n};\n\n/**\n * Возвращает массив таймингов которые будут в будущем\n * @param hours\n */\n export const findClosesTimeArray = (hours: string[]): string[] => {\n  let closestTime: string[] = [];\n  \n  for (let i = 0; i < hours.length; i++) {\n    const splitted = hours[i].split(\":\").map((item) => parseInt(item, 10));\n\n    const possibleDate = new Date().setHours(splitted[0], splitted[1]);\n\n    if (possibleDate - new Date().getTime() > 0) {\n      closestTime.push(hours[i])\n    }\n  }\n\n  return closestTime;\n};\n\nexport interface ITime {\n  hours: number | null;\n  minutes: number | null;\n}\nconst getTimeFromMins = (mins: number): ITime => {\n  let hours = Math.trunc(mins / 60);\n  let minutes = Math.round(mins % 60);\n\n  return {\n    hours,\n    minutes,\n  };\n};\n\n/**\n * Находит разницу текущего времени с расписанием = столько надо ждать\n * @param closestTime\n * @currentDate\n */\nexport const calculateHowMuchIsLeft = (\n  closestTime: Date | null\n): ITime => {\n  if (!closestTime)\n    return {\n      hours: null,\n      minutes: null,\n    };\n\n  const left =\n    Math.abs(closestTime.getTime() - new Date().getTime()) / 1000 / 60;\n\n  return getTimeFromMins(left);\n};\n","import React from \"react\";\n\nimport styled from \"styled-components\";\n\nimport { DayKeys, SCHEDULE, StopKeys } from \"./consts\";\nimport {\n  calculateHowMuchIsLeft,\n  findClosesTime,\n  findClosesTimeArray,\n  ITime,\n} from \"./helpers\";\n\nconst HowMuchLeftBlock = styled.div`\n  padding: 20px;\n  background-color: #0000ff21;\n`;\nconst LinksBlock = styled.div`\n  padding: 20px;\n  background-color: #ffc80021;\n`;\nconst BusEstimation = styled.div`\n  font-size: 25px;\n  font-weight: normal;\n`;\nconst TextWrapper = styled.p``;\nconst HighLighted = styled.span`\n  font-weight: bold;\n  margin-left: 8px;\n`;\nconst OtherTime = styled.div`\n  padding: 20px;\n  background-color: #00ff5a21;\n`;\nconst TimeStamp = styled.p``;\n\n\nconst currentDay = \"saturday\" as DayKeys;\n\nfunction Schedule() {\n  const [busStop] = React.useState<StopKeys>(\"маяковского\");\n  const [left, setLeft] = React.useState<ITime>({\n    hours: 0,\n    minutes: 0,\n  });\n  const [closestTimeArray, setClossestTimeArray] = React.useState<string[]>([]);\n  const [closestTime, setClossestTime] = React.useState<Date | null>(null);\n\n  const [_everyMinuteUpdate, _setUpdate] = React.useState(0);\n\n  React.useEffect(() => {\n    console.log(\"in interval\");\n    const int = setInterval(() => _setUpdate(Date.now()), 1000);\n\n    return () => {\n      clearInterval(int);\n    };\n  }, [_everyMinuteUpdate]);\n\n  React.useEffect(() => {\n    const _closestTime = findClosesTime(SCHEDULE[currentDay][busStop]);\n\n    console.log(\n      \"date\",\n      new Date(),\n      _closestTime,\n      SCHEDULE[currentDay][busStop]\n    );\n    if (\n      _closestTime?.getMinutes() !== closestTime?.getMinutes() &&\n      _closestTime?.getHours() !== closestTime?.getHours()\n    ) {\n      setClossestTimeArray(findClosesTimeArray(SCHEDULE[currentDay][busStop]));\n      setClossestTime(_closestTime);\n    }\n  }, [_everyMinuteUpdate, closestTime, busStop]);\n\n  React.useEffect(() => {\n    const left = calculateHowMuchIsLeft(closestTime);\n\n    setLeft(left);\n  }, [_everyMinuteUpdate, closestTime]);\n\n  const renderLeftToString = () => {\n    if (left.hours === null && left.minutes === null)\n      return (\n        <TextWrapper>\n          Автобус на остановку <b>{busStop}</b> сегодня не приедет\n        </TextWrapper>\n      );\n\n    return (\n      <TextWrapper>\n        Следующий автобус приедет через\n        <HighLighted>\n          {left.hours}ч {left.minutes}м\n        </HighLighted>\n      </TextWrapper>\n    );\n  };\n\n  return (\n    <>\n      <HowMuchLeftBlock>\n        <BusEstimation>{renderLeftToString()}</BusEstimation>\n      </HowMuchLeftBlock>\n\n      <OtherTime>\n        <TextWrapper>Время на сегодня:</TextWrapper>\n        {closestTimeArray.map((d) => (\n          <TimeStamp>{d}</TimeStamp>\n        ))}\n      </OtherTime>\n\n      <LinksBlock>\n        <a\n          href=\"http://www.tomskavtotrans.ru/60\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          Расписание\n        </a>\n      </LinksBlock>\n    </>\n  );\n}\n\nexport default Schedule;\n","\nimport React from 'react';\nimport Schedule from './Schedule';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Schedule />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals(console.log);\n"],"sourceRoot":""}