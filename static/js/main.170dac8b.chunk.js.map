{"version":3,"sources":["Schedule/index.tsx","App.tsx","index.tsx"],"names":["HowMuchLeftBlock","styled","div","LinksBlock","BusEstimation","TextWrapper","p","HighLighted","span","OtherTime","TimeStamp","Schedule","React","useState","busStop","hours","minutes","left","closestTimeArray","map","d","href","target","rel","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAYMA,EAAmBC,IAAOC,IAAV,8EAIhBC,EAAaF,IAAOC,IAAV,8EAIVE,EAAgBH,IAAOC,IAAV,wEAIbG,EAAcJ,IAAOK,EAAV,0BACXC,EAAcN,IAAOO,KAAV,uEAIXC,EAAYR,IAAOC,IAAV,8EAITQ,EAAYT,IAAOK,EAAV,0BA+FAK,MAxFf,WAAqB,IAAD,EACCC,IAAMC,SAAmB,sEAArCC,EADW,sBAEMF,IAAMC,SAAgB,CAC5CE,MAAO,EACPC,QAAS,IAJO,mBAEXC,EAFW,aAM+BL,IAAMC,SAAmB,KANxD,mBAMXK,EANW,aAOqBN,IAAMC,SAAsB,OAPjD,gCASuBD,IAAMC,SAAS,IATtC,mBA8DlB,OA9DkB,UA+DhB,qCACE,cAACb,EAAD,UACE,cAACI,EAAD,UApBe,OAAfa,EAAKF,OAAmC,OAAjBE,EAAKD,QAE5B,eAACX,EAAD,6HACuB,4BAAIS,IAD3B,yGAMF,eAACT,EAAD,yLAEE,eAACE,EAAD,WACGU,EAAKF,MADR,UACiBE,EAAKD,QADtB,mBAaF,eAACP,EAAD,WACE,cAACJ,EAAD,sGACCa,EAAiBC,KAAI,SAACC,GAAD,OACpB,cAACV,EAAD,UAAYU,UAIhB,cAACjB,EAAD,UACE,mBACEkB,KAAK,kCACLC,OAAO,SACPC,IAAI,aAHN,gFCxGOC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCDNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.170dac8b.chunk.js","sourcesContent":["import React from \"react\";\n\nimport styled from \"styled-components\";\n\nimport { DayKeys, SCHEDULE, StopKeys } from \"./consts\";\nimport {\n  calculateHowMuchIsLeft,\n  findClosesTime,\n  findClosesTimeArray,\n  ITime,\n} from \"./helpers\";\n\nconst HowMuchLeftBlock = styled.div`\n  padding: 20px;\n  background-color: #0000ff21;\n`;\nconst LinksBlock = styled.div`\n  padding: 20px;\n  background-color: #ffc80021;\n`;\nconst BusEstimation = styled.div`\n  font-size: 25px;\n  font-weight: normal;\n`;\nconst TextWrapper = styled.p``;\nconst HighLighted = styled.span`\n  font-weight: bold;\n  margin-left: 8px;\n`;\nconst OtherTime = styled.div`\n  padding: 20px;\n  background-color: #00ff5a21;\n`;\nconst TimeStamp = styled.p``;\n\n// const currentDate = new Date();\n// const currentDay = currentDate\n//   .toLocaleString(\"default\", { weekday: \"long\" })\n//   .toLocaleLowerCase() as DayKeys;\n\nfunction Schedule() {\n  const [busStop,] = React.useState<StopKeys>(\"маяковского\");\n  const [left, setLeft] = React.useState<ITime>({\n    hours: 0,\n    minutes: 0,\n  });\n  const [closestTimeArray, setClossestTimeArray] = React.useState<string[]>([]);\n  const [closestTime, setClossestTime] = React.useState<Date | null>(null);\n\n  const [_everyMinuteUpdate, _setUpdate] = React.useState(0);\n\n//   React.useEffect(() => {\n//       console.log('in interval')\n//     const int = setInterval(() => _setUpdate(Date.now()), 1000);\n\n//     return () => {\n//       clearInterval(int);\n//     };\n//   }, [_everyMinuteUpdate]);\n\n//   React.useEffect(() => {\n//     const _closestTime = findClosesTime(SCHEDULE[currentDay][busStop]);\n\n//     console.log(\n//       \"date\",\n//       new Date(),\n//       _closestTime,\n//       SCHEDULE[currentDay][busStop]\n//     );\n//     if (\n//       _closestTime?.getMinutes() !== closestTime?.getMinutes() &&\n//       _closestTime?.getHours() !== closestTime?.getHours()\n//     ) {\n//       setClossestTimeArray(findClosesTimeArray(SCHEDULE[currentDay][busStop]));\n//       setClossestTime(_closestTime);\n//     }\n//   }, [_everyMinuteUpdate, closestTime, busStop]);\n\n//   React.useEffect(() => {\n//     const left = calculateHowMuchIsLeft(closestTime);\n\n//     setLeft(left);\n//   }, [_everyMinuteUpdate, closestTime]);\n\n  const renderLeftToString = () => {\n    if (left.hours === null && left.minutes === null)\n      return (\n        <TextWrapper>\n          Автобус на остановку <b>{busStop}</b> сегодня не приедет\n        </TextWrapper>\n      );\n\n    return (\n      <TextWrapper>\n        Следующий автобус приедет через\n        <HighLighted>\n          {left.hours}ч {left.minutes}м\n        </HighLighted>\n      </TextWrapper>\n    );\n  };\n\n  return (\n    <>\n      <HowMuchLeftBlock>\n        <BusEstimation>{renderLeftToString()}</BusEstimation>\n      </HowMuchLeftBlock>\n\n      <OtherTime>\n        <TextWrapper>Время на сегодня:</TextWrapper>\n        {closestTimeArray.map((d) => (\n          <TimeStamp>{d}</TimeStamp>\n        ))}\n      </OtherTime>\n\n      <LinksBlock>\n        <a\n          href=\"http://www.tomskavtotrans.ru/60\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          Расписание\n        </a>\n      </LinksBlock>\n    </>\n  );\n}\n\nexport default Schedule;\n","\nimport React from 'react';\nimport Schedule from './Schedule';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Schedule />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals(console.log);\n"],"sourceRoot":""}